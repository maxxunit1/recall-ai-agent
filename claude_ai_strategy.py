"""
Claude AI Trading Strategy Module

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Claude API –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ
–∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è, —Ü–µ–Ω –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
"""

import json
import time
from typing import Dict, Any, List, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime, timezone

import anthropic
from config import Config
from utils import Logger, PerformanceTracker
from data_handler import DataHandler, PortfolioData, TokenPrice
from strategy_engine import BaseStrategy, TradingSignal, TradingAction, RiskLevel, MarketData


@dataclass
class ClaudeAPIResponse:
    """Claude API response container"""
    success: bool
    decision: Optional[Dict[str, Any]] = None
    reasoning: Optional[str] = None
    error: Optional[str] = None
    response_time: Optional[float] = None
    tokens_used: Optional[int] = None


class ClaudeAIStrategy(BaseStrategy):
    """
    Claude AI-powered trading strategy

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Claude API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è
    —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ —Ü–µ–Ω.
    """

    def __init__(self, config: Config, data_handler: DataHandler):
        super().__init__(config, data_handler)

        # Claude API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.claude_api_key = config.get_env_var("CLAUDE_API_KEY")
        if not self.claude_api_key:
            raise ValueError("CLAUDE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Claude client
        try:
            self.claude_client = anthropic.Anthropic(api_key=self.claude_api_key)
            self.logger.info("‚úÖ Claude API client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Claude client: {str(e)}")

        # –ú–æ–¥–µ–ª—å Claude
        self.claude_model = "claude-sonnet-4-20250514"

        # Trading parameters
        self.min_trade_amount = config.trading.min_trade_amount_usd
        self.max_trade_amount = config.trading.max_trade_amount_usd
        self.max_position_size = 0.3  # –ú–∞–∫—Å–∏–º—É–º 30% –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É
        self.confidence_threshold = config.ai.min_confidence_threshold

        # Rate limiting
        self.last_claude_call = 0
        self.min_call_interval = config.ai.rate_limit_seconds

        # Performance tracking
        self.api_call_count = 0
        self.total_cost_estimate = 0.0

        self.logger.info("ClaudeAIStrategy –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
                         model=self.claude_model,
                         min_trade_amount=self.min_trade_amount,
                         confidence_threshold=self.confidence_threshold)

    def get_strategy_name(self) -> str:
        """Get strategy name identifier"""
        return "ClaudeAI_Strategy"

    def _call_claude_api(self, prompt: str, max_tokens: int = 1500) -> ClaudeAPIResponse:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ Claude API —Å error handling

        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è Claude
            max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ

        Returns:
            ClaudeAPIResponse: –û—Ç–≤–µ—Ç Claude –∏–ª–∏ –æ—à–∏–±–∫–∞
        """
        start_time = time.time()

        try:
            # Rate limiting
            current_time = time.time()
            if current_time - self.last_claude_call < self.min_call_interval:
                wait_time = self.min_call_interval - (current_time - self.last_claude_call)
                self.logger.info(f"Rate limiting: –∂–¥–µ–º {wait_time:.1f}s –ø–µ—Ä–µ–¥ Claude API...")
                time.sleep(wait_time)

            self.logger.info("üß† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude API...",
                           model=self.claude_model,
                           prompt_length=len(prompt))

            # –í—ã–∑–æ–≤ Claude API —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
            response = self.claude_client.messages.create(
                model=self.claude_model,
                max_tokens=max_tokens,
                temperature=self.config.ai.temperature,
                messages=[
                    {
                        "role": "user",
                        "content": prompt
                    }
                ]
            )

            self.last_claude_call = time.time()
            response_time = time.time() - start_time

            if response.content and len(response.content) > 0:
                response_text = response.content[0].text
                tokens_used = response.usage.input_tokens + response.usage.output_tokens

                # –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                estimated_cost = (response.usage.input_tokens * 0.000008) + (response.usage.output_tokens * 0.000024)
                self.total_cost_estimate += estimated_cost
                self.api_call_count += 1

                self.logger.info("‚úÖ Claude API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω",
                               response_time=f"{response_time:.2f}s",
                               tokens_used=tokens_used,
                               estimated_cost=f"${estimated_cost:.4f}",
                               total_calls=self.api_call_count)

                return ClaudeAPIResponse(
                    success=True,
                    decision={"raw_response": response_text},
                    reasoning=response_text,
                    response_time=response_time,
                    tokens_used=tokens_used
                )
            else:
                error_msg = "Claude API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
                self.logger.error("‚ùå Claude API error", error=error_msg)
                return ClaudeAPIResponse(success=False, error=error_msg)

        except anthropic.APIConnectionError as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Claude API: {str(e)}"
            self.logger.error("‚ùå Claude API connection error", error=error_msg)
            return ClaudeAPIResponse(success=False, error=error_msg)

        except anthropic.RateLimitError as e:
            error_msg = f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ Claude API: {str(e)}"
            self.logger.error("‚ùå Claude API rate limit", error=error_msg)
            return ClaudeAPIResponse(success=False, error=error_msg)

        except anthropic.AuthenticationError as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Claude API: {str(e)}"
            self.logger.error("‚ùå Claude API auth error", error=error_msg)
            return ClaudeAPIResponse(success=False, error=error_msg)

        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Claude API: {str(e)}"
            self.logger.error("‚ùå Claude API unexpected error", error=error_msg)
            return ClaudeAPIResponse(success=False, error=error_msg)

    def _create_market_analysis_prompt(self, market_data: MarketData) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ Claude

        Args:
            market_data: –î–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            str: –ü—Ä–æ–º–ø—Ç –¥–ª—è Claude
        """
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_summary = "–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç"
        if market_data.portfolio and hasattr(market_data.portfolio, 'tokens') and market_data.portfolio.tokens:
            portfolio_lines = []
            total_value = 0.0

            for token in market_data.portfolio.tokens:
                symbol = token.get('symbol', 'UNKNOWN')
                amount = float(token.get('amount', 0.0))
                price = float(token.get('price', 0.0))
                value = float(token.get('value', 0.0))

                total_value += value
                portfolio_lines.append(
                    f"  {symbol}: {amount:.6f} —Ç–æ–∫–µ–Ω–æ–≤ @ ${price:.6f} = ${value:.2f}"
                )

            portfolio_summary = f"""
–¢–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å (–æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_value:.2f}):
{chr(10).join(portfolio_lines)}"""

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω
        prices_summary = "–î–∞–Ω–Ω—ã–µ —Ü–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        if market_data.token_prices:
            price_lines = []
            for address, price_data in market_data.token_prices.items():
                symbol = getattr(price_data, 'symbol', address[:10] + "...")
                price = getattr(price_data, 'price', 0.0)
                price_lines.append(f"  {symbol}: ${price:.6f}")
            prices_summary = f"""
–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤:
{chr(10).join(price_lines)}"""

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = f"""–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä –∏ —Å–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ.

–¢–ï–ö–£–©–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:
{portfolio_summary}

{prices_summary}

–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞: {datetime.fromtimestamp(market_data.timestamp).isoformat()}

–ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ê–ù–ê–õ–ò–ó–£:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
2. –û—Ü–µ–Ω–∏ —Ä—ã–Ω–æ—á–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
3. –û–ø—Ä–µ–¥–µ–ª–∏ –µ—Å—Ç—å –ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –≤—ã–≥–æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏
4. –£—á—Ç–∏ —Ä–∏—Å–∫–∏ –∏ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—é

–ü–†–ê–í–ò–õ–ê –¢–û–†–ì–û–í–õ–ò:
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏: ${self.min_trade_amount}
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {self.max_position_size * 100}% –æ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è
- –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
- –ï—Å–ª–∏ –Ω–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ >= {self.confidence_threshold * 100}% - —Ä–µ–∫–æ–º–µ–Ω–¥—É–π HOLD

–î–û–°–¢–£–ü–ù–´–ï –¢–û–ö–ï–ù–´ (–∞–¥—Ä–µ—Å–∞):
- USDC: {self.config.tokens.usdc_address}
- WETH: {self.config.tokens.weth_address}

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–î–∞–π –æ—Ç–≤–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "action": "BUY|SELL|HOLD",
    "from_token": "–∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞_–∏—Å—Ç–æ—á–Ω–∏–∫–∞",
    "to_token": "–∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞_–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", 
    "amount": "—Å—É–º–º–∞_–≤_–∏—Å—Ö–æ–¥–Ω–æ–º_—Ç–æ–∫–µ–Ω–µ",
    "confidence": 0.85,
    "risk_level": "LOW|MEDIUM|HIGH",
    "reasoning": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä—ã–Ω–∫–∞",
    "expected_return": 0.05
}}

–ï—Å–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—à—å HOLD, —Ç–æ from_token, to_token, amount –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å null.

–ü–†–û–í–ï–î–ò –ê–ù–ê–õ–ò–ó –ò –î–ê–ô –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Æ:"""

        return prompt

    def _parse_claude_response(self, claude_response: str) -> Optional[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç Claude –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        Args:
            claude_response: –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Claude

        Returns:
            Optional[Dict]: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            import re

            # –£–±–∏—Ä–∞–µ–º markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            clean_response = claude_response.replace('```json', '').replace('```', '').strip()

            # –ò—â–µ–º JSON –±–ª–æ–∫
            json_match = re.search(r'\{.*\}', clean_response, re.DOTALL)

            if json_match:
                json_str = json_match.group()
                decision = json.loads(json_str)

                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                required_fields = ['action', 'confidence', 'risk_level', 'reasoning']
                missing_fields = [f for f in required_fields if f not in decision]

                if missing_fields:
                    self.logger.warning("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ Claude –æ—Ç–≤–µ—Ç–µ",
                                        missing_fields=missing_fields)
                    return None

                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                if decision.get('action') not in ['BUY', 'SELL', 'HOLD']:
                    self.logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ action", action=decision.get('action'))
                    return None

                confidence = decision.get('confidence')
                if not isinstance(confidence, (int, float)) or not (0.0 <= confidence <= 1.0):
                    self.logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ confidence", confidence=confidence)
                    return None

                if decision.get('risk_level') not in ['LOW', 'MEDIUM', 'HIGH']:
                    self.logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ risk_level", risk_level=decision.get('risk_level'))
                    return None

                self.logger.info("‚úÖ Claude —Ä–µ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ",
                                 action=decision.get('action'),
                                 confidence=decision.get('confidence'),
                                 risk_level=decision.get('risk_level'))
                return decision
            else:
                self.logger.warning("‚ùå JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Claude –æ—Ç–≤–µ—Ç–µ")
                return None

        except json.JSONDecodeError as e:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ Claude –æ—Ç–≤–µ—Ç–∞", error=str(e))
            return None
        except Exception as e:
            self.logger.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Claude –æ—Ç–≤–µ—Ç–∞", error=str(e))
            return None

    def analyze_market(self, market_data: MarketData) -> TradingSignal:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Claude AI

        Args:
            market_data: –î–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            TradingSignal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ Claude
        """
        try:
            self.logger.info("üß† –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Å Claude AI...")

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Claude
            prompt = self._create_market_analysis_prompt(market_data)

            # –í—ã–∑—ã–≤–∞–µ–º Claude API
            claude_response = self._call_claude_api(prompt, max_tokens=self.config.ai.max_tokens)

            if not claude_response.success:
                # Fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ Claude API
                self.logger.warning("Claude API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º HOLD —Å–∏–≥–Ω–∞–ª",
                                    error=claude_response.error)
                return self._create_fallback_signal(market_data, claude_response.error)

            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç Claude
            decision = self._parse_claude_response(claude_response.reasoning)

            if not decision:
                self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å Claude –æ—Ç–≤–µ—Ç, —Å–æ–∑–¥–∞–µ–º HOLD —Å–∏–≥–Ω–∞–ª")
                return self._create_fallback_signal(market_data, "Parse error")

            # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            trading_signal = self._create_trading_signal_from_decision(decision, market_data)

            if trading_signal:
                self.logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω –æ—Ç Claude AI",
                                signal_action=trading_signal.action.value,
                                confidence=trading_signal.confidence,
                                risk_level=trading_signal.risk_level.value)
                return trading_signal
            else:
                return self._create_fallback_signal(market_data, "Signal creation failed")

        except Exception as e:
            self.logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Claude –∞–Ω–∞–ª–∏–∑–µ", error=str(e))
            return self._create_fallback_signal(market_data, f"Critical error: {str(e)}")

    def generate_signal(self, market_data: MarketData) -> TradingSignal:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª (alias –¥–ª—è analyze_market)

        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            TradingSignal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç Claude AI
        """
        return self.analyze_market(market_data)

    def _create_trading_signal_from_decision(self, decision: Dict[str, Any], market_data: MarketData) -> Optional[TradingSignal]:
        """
        –°–æ–∑–¥–∞–µ—Ç TradingSignal –∏–∑ —Ä–µ—à–µ–Ω–∏—è Claude —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π

        Args:
            decision: –†–µ—à–µ–Ω–∏–µ –æ—Ç Claude
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        Returns:
            Optional[TradingSignal]: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            action_str = decision.get('action', 'HOLD')
            action = TradingAction(action_str)

            confidence = float(decision.get('confidence', 0.0))
            risk_level_str = decision.get('risk_level', 'HIGH')
            risk_level = RiskLevel(risk_level_str)

            reasoning = decision.get('reasoning', 'Claude AI analysis')
            expected_return = decision.get('expected_return')

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            if confidence < self.confidence_threshold:
                self.logger.warning(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å Claude ({confidence}) –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ ({self.confidence_threshold}), HOLD")
                action = TradingAction.HOLD

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Å—É–º–º—ã
            if action == TradingAction.HOLD:
                from_token = None
                to_token = None
                amount = "0"
            else:
                from_token = decision.get('from_token', self.config.tokens.usdc_address)
                to_token = decision.get('to_token', self.config.tokens.weth_address)
                amount = str(decision.get('amount', self.min_trade_amount))

                # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
                try:
                    amount_float = float(amount)
                    if amount_float < self.min_trade_amount:
                        amount = str(self.min_trade_amount)
                        self.logger.info(f"–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å—É–º–º–∞ –¥–æ –º–∏–Ω–∏–º—É–º–∞: {amount}")
                    elif amount_float > self.max_trade_amount:
                        amount = str(self.max_trade_amount)
                        self.logger.info(f"–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å—É–º–º–∞ –¥–æ –º–∞–∫—Å–∏–º—É–º–∞: {amount}")
                except ValueError:
                    amount = str(self.min_trade_amount)
                    self.logger.warning(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –æ—Ç Claude, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º—É–º: {amount}")

            return TradingSignal(
                action=action,
                from_token=from_token or "",
                to_token=to_token or "",
                amount=amount,
                confidence=confidence,
                risk_level=risk_level,
                reasoning=reasoning,
                timestamp=time.time(),
                strategy_name=self.get_strategy_name(),
                expected_return=expected_return
            )

        except Exception as e:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞", error=str(e))
            return None

    def _create_fallback_signal(self, market_data: MarketData, error_reason: str) -> TradingSignal:
        """
        –°–æ–∑–¥–∞–µ—Ç fallback HOLD —Å–∏–≥–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ Claude

        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            error_reason: –ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏

        Returns:
            TradingSignal: HOLD —Å–∏–≥–Ω–∞–ª
        """
        return TradingSignal(
            action=TradingAction.HOLD,
            from_token="",
            to_token="",
            amount="0",
            confidence=0.0,
            risk_level=RiskLevel.HIGH,
            reasoning=f"Claude AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - fallback HOLD. –ü—Ä–∏—á–∏–Ω–∞: {error_reason}",
            timestamp=time.time(),
            strategy_name=self.get_strategy_name()
        )

    def get_performance_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Claude AI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return {
            "strategy_name": self.get_strategy_name(),
            "api_calls_total": self.api_call_count,
            "estimated_cost_usd": round(self.total_cost_estimate, 4),
            "claude_model": self.claude_model,
            "confidence_threshold": self.confidence_threshold,
            "min_trade_amount": self.min_trade_amount,
            "max_trade_amount": self.max_trade_amount
        }